{"code":"const RECOGNIZED_PROVIDERS = new Set(['google', 'anthropic', 'openAI']);\nconst imageFormatters = {\n    // google: (item) => ({\n    //   type: 'image',\n    //   inlineData: {\n    //     mimeType: item.mimeType,\n    //     data: item.data,\n    //   },\n    // }),\n    // anthropic: (item) => ({\n    //   type: 'image',\n    //   source: {\n    //     type: 'base64',\n    //     media_type: item.mimeType,\n    //     data: item.data,\n    //   },\n    // }),\n    default: (item) => ({\n        type: 'image_url',\n        image_url: {\n            url: item.data.startsWith('http') ? item.data : `data:${item.mimeType};base64,${item.data}`,\n        },\n    }),\n};\nfunction isImageContent(item) {\n    return item.type === 'image';\n}\nfunction parseAsString(result) {\n    var _a;\n    const content = (_a = result === null || result === void 0 ? void 0 : result.content) !== null && _a !== void 0 ? _a : [];\n    if (!content.length) {\n        return '(No response)';\n    }\n    const text = content\n        .map((item) => {\n        if (item.type === 'text') {\n            return item.text;\n        }\n        if (item.type === 'resource') {\n            const resourceText = [];\n            if (item.resource.text != null && item.resource.text) {\n                resourceText.push(item.resource.text);\n            }\n            if (item.resource.uri) {\n                resourceText.push(`Resource URI: ${item.resource.uri}`);\n            }\n            if (item.resource.mimeType != null && item.resource.mimeType) {\n                resourceText.push(`Type: ${item.resource.mimeType}`);\n            }\n            return resourceText.join('\\n');\n        }\n        return JSON.stringify(item, null, 2);\n    })\n        .filter(Boolean)\n        .join('\\n\\n');\n    return text;\n}\n/**\n * Converts MCPToolCallResponse content into recognized content block types\n * Recognized types: \"image\", \"image_url\", \"text\", \"json\"\n *\n * @param {t.MCPToolCallResponse} result - The MCPToolCallResponse object\n * @param {string} provider - The provider name (google, anthropic, openai)\n * @returns {Array<Object>} Formatted content blocks\n */\n/**\n * Converts MCPToolCallResponse content into recognized content block types\n * First element: string or formatted content (excluding image_url)\n * Second element: image_url content if any\n *\n * @param {t.MCPToolCallResponse} result - The MCPToolCallResponse object\n * @param {string} provider - The provider name (google, anthropic, openai)\n * @returns {t.FormattedToolResponse} Tuple of content and image_urls\n */\nexport function formatToolContent(result, provider) {\n    var _a;\n    if (!RECOGNIZED_PROVIDERS.has(provider)) {\n        return [parseAsString(result), undefined];\n    }\n    const content = (_a = result === null || result === void 0 ? void 0 : result.content) !== null && _a !== void 0 ? _a : [];\n    if (!content.length) {\n        return [[{ type: 'text', text: '(No response)' }], undefined];\n    }\n    const formattedContent = [];\n    const imageUrls = [];\n    let currentTextBlock = '';\n    const contentHandlers = {\n        text: (item) => {\n            currentTextBlock += (currentTextBlock ? '\\n\\n' : '') + item.text;\n        },\n        image: (item) => {\n            if (!isImageContent(item)) {\n                return;\n            }\n            if (currentTextBlock) {\n                formattedContent.push({ type: 'text', text: currentTextBlock });\n                currentTextBlock = '';\n            }\n            const formatter = imageFormatters.default;\n            const formattedImage = formatter(item);\n            if (formattedImage.type === 'image_url') {\n                imageUrls.push(formattedImage);\n            }\n            else {\n                formattedContent.push(formattedImage);\n            }\n        },\n        resource: (item) => {\n            const resourceText = [];\n            if (item.resource.text != null && item.resource.text) {\n                resourceText.push(item.resource.text);\n            }\n            if (item.resource.uri.length) {\n                resourceText.push(`Resource URI: ${item.resource.uri}`);\n            }\n            if (item.resource.mimeType != null && item.resource.mimeType) {\n                resourceText.push(`Type: ${item.resource.mimeType}`);\n            }\n            currentTextBlock += (currentTextBlock ? '\\n\\n' : '') + resourceText.join('\\n');\n        },\n    };\n    for (const item of content) {\n        const handler = contentHandlers[item.type];\n        if (handler) {\n            handler(item);\n        }\n        else {\n            const stringified = JSON.stringify(item, null, 2);\n            currentTextBlock += (currentTextBlock ? '\\n\\n' : '') + stringified;\n        }\n    }\n    if (currentTextBlock) {\n        formattedContent.push({ type: 'text', text: currentTextBlock });\n    }\n    return [formattedContent, imageUrls.length ? { content: imageUrls } : undefined];\n}\n//# sourceMappingURL=parsers.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/packages/mcp/src/types/mcp.ts"],"map":"{\"version\":3,\"file\":\"parsers.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/parsers.ts\"],\"names\":[],\"mappings\":\"AACA,MAAM,oBAAoB,GAAG,IAAI,GAAG,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;AAExE,MAAM,eAAe,GAAiD;IACpE,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;IAClB,+BAA+B;IAC/B,uBAAuB;IACvB,OAAO;IACP,MAAM;IACN,0BAA0B;IAC1B,mBAAmB;IACnB,cAAc;IACd,sBAAsB;IACtB,iCAAiC;IACjC,uBAAuB;IACvB,OAAO;IACP,MAAM;IACN,OAAO,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAClB,IAAI,EAAE,WAAW;QACjB,SAAS,EAAE;YACT,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,IAAI,EAAE;SAC5F;KACF,CAAC;CACH,CAAC;AAEF,SAAS,cAAc,CAAC,IAAuB;IAC7C,OAAO,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;AAC/B,CAAC;AAED,SAAS,aAAa,CAAC,MAA6B;;IAClD,MAAM,OAAO,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,mCAAI,EAAE,CAAC;IACtC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACpB,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,MAAM,IAAI,GAAG,OAAO;SACjB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;QACZ,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACzB,OAAO,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;QACD,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YAC7B,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACrD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;gBACtB,YAAY,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1D,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC7D,YAAY,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvD,CAAC;YACD,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC;SACD,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,MAAM,CAAC,CAAC;IAEhB,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;;;GAOG;AACH;;;;;;;;GAQG;AACH,MAAM,UAAU,iBAAiB,CAC/B,MAA6B,EAC7B,QAAoB;;IAEpB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,OAAO,GAAG,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,mCAAI,EAAE,CAAC;IACtC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACpB,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC;IAED,MAAM,gBAAgB,GAAyB,EAAE,CAAC;IAClD,MAAM,SAAS,GAAyB,EAAE,CAAC;IAC3C,IAAI,gBAAgB,GAAG,EAAE,CAAC;IAI1B,MAAM,eAAe,GAIjB;QACF,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE;YACb,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QACnE,CAAC;QAED,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YACd,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1B,OAAO;YACT,CAAC;YACD,IAAI,gBAAgB,EAAE,CAAC;gBACrB,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;gBAChE,gBAAgB,GAAG,EAAE,CAAC;YACxB,CAAC;YACD,MAAM,SAAS,GAAG,eAAe,CAAC,OAA2B,CAAC;YAC9D,MAAM,cAAc,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;YAEvC,IAAI,cAAc,CAAC,IAAI,KAAK,WAAW,EAAE,CAAC;gBACxC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACjC,CAAC;iBAAM,CAAC;gBACN,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;QAED,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE;YACjB,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACrD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;gBAC7B,YAAY,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1D,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;gBAC7D,YAAY,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvD,CAAC;YACD,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjF,CAAC;KACF,CAAC;IAEF,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE,CAAC;QAC3B,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,IAAoC,CAAmB,CAAC;QAC7F,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,IAAa,CAAC,CAAC;QACzB,CAAC;aAAM,CAAC;YACN,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAClD,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;QACrE,CAAC;IACH,CAAC;IAED,IAAI,gBAAgB,EAAE,CAAC;QACrB,gBAAgB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;IAClE,CAAC;IAED,OAAO,CAAC,gBAAgB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AACnF,CAAC\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/mcp/dist/types/parsers.d.ts","writeByteOrderMark":false,"text":"import type * as t from './types/mcp';\n/**\n * Converts MCPToolCallResponse content into recognized content block types\n * Recognized types: \"image\", \"image_url\", \"text\", \"json\"\n *\n * @param {t.MCPToolCallResponse} result - The MCPToolCallResponse object\n * @param {string} provider - The provider name (google, anthropic, openai)\n * @returns {Array<Object>} Formatted content blocks\n */\n/**\n * Converts MCPToolCallResponse content into recognized content block types\n * First element: string or formatted content (excluding image_url)\n * Second element: image_url content if any\n *\n * @param {t.MCPToolCallResponse} result - The MCPToolCallResponse object\n * @param {string} provider - The provider name (google, anthropic, openai)\n * @returns {t.FormattedToolResponse} Tuple of content and image_urls\n */\nexport declare function formatToolContent(result: t.MCPToolCallResponse, provider: t.Provider): t.FormattedToolResponse;\n"}}
