{"code":"import { z } from 'zod';\nvar BaseOptionsSchema = z.object({\n    iconPath: z.string().optional(),\n});\nexport var StdioOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('stdio').optional(),\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.string(),\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.array(z.string()),\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     */\n    env: z.record(z.string(), z.string()).optional(),\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.any().optional(),\n});\nexport var WebSocketOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('websocket').optional(),\n    url: z\n        .string()\n        .url()\n        .refine(function (val) {\n        var protocol = new URL(val).protocol;\n        return protocol === 'ws:' || protocol === 'wss:';\n    }, {\n        message: 'WebSocket URL must start with ws:// or wss://',\n    }),\n});\nexport var SSEOptionsSchema = BaseOptionsSchema.extend({\n    type: z.literal('sse').optional(),\n    url: z\n        .string()\n        .url()\n        .refine(function (val) {\n        var protocol = new URL(val).protocol;\n        return protocol !== 'ws:' && protocol !== 'wss:';\n    }, {\n        message: 'SSE URL must not start with ws:// or wss://',\n    }),\n});\nexport var MCPOptionsSchema = z.union([\n    StdioOptionsSchema,\n    WebSocketOptionsSchema,\n    SSEOptionsSchema,\n]);\nexport var MCPServersSchema = z.record(z.string(), MCPOptionsSchema);\n//# sourceMappingURL=mcp.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/node_modules/zod/index.d.ts"],"map":"{\"version\":3,\"file\":\"mcp.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/mcp.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,IAAM,iBAAiB,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAChC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,kBAAkB,GAAG,iBAAiB,CAAC,MAAM,CAAC;IACzD,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE;IACnC;;OAEG;IACH,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE;IACnB;;OAEG;IACH,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;IACzB;;;;OAIG;IACH,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;IAChD;;;;;;OAMG;IACH,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;CAC3B,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,sBAAsB,GAAG,iBAAiB,CAAC,MAAM,CAAC;IAC7D,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE;IACvC,GAAG,EAAE,CAAC;SACH,MAAM,EAAE;SACR,GAAG,EAAE;SACL,MAAM,CACL,UAAC,GAAG;QACF,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QACvC,OAAO,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,MAAM,CAAC;IACnD,CAAC,EACD;QACE,OAAO,EAAE,+CAA+C;KACzD,CACF;CACJ,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,gBAAgB,GAAG,iBAAiB,CAAC,MAAM,CAAC;IACvD,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE;IACjC,GAAG,EAAE,CAAC;SACH,MAAM,EAAE;SACR,GAAG,EAAE;SACL,MAAM,CACL,UAAC,GAAG;QACF,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC;QACvC,OAAO,QAAQ,KAAK,KAAK,IAAI,QAAQ,KAAK,MAAM,CAAC;IACnD,CAAC,EACD;QACE,OAAO,EAAE,6CAA6C;KACvD,CACF;CACJ,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,gBAAgB,GAAG,CAAC,CAAC,KAAK,CAAC;IACtC,kBAAkB;IAClB,sBAAsB;IACtB,gBAAgB;CACjB,CAAC,CAAC;AAEH,MAAM,CAAC,IAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,gBAAgB,CAAC,CAAC\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/mcp.d.ts","writeByteOrderMark":false,"text":"import { z } from 'zod';\nexport declare const StdioOptionsSchema: z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     */\n    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}>, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>;\nexport declare const WebSocketOptionsSchema: z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}>;\nexport declare const SSEOptionsSchema: z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}>;\nexport declare const MCPOptionsSchema: z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     */\n    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}>, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>, z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}>, z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}>]>;\nexport declare const MCPServersSchema: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"stdio\">>;\n    /**\n     * The executable to run to start the server.\n     */\n    command: z.ZodString;\n    /**\n     * Command line arguments to pass to the executable.\n     */\n    args: z.ZodArray<z.ZodString, \"many\">;\n    /**\n     * The environment to use when spawning the process.\n     *\n     * If not specified, the result of getDefaultEnvironment() will be used.\n     */\n    env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;\n    /**\n     * How to handle stderr of the child process. This matches the semantics of Node's `child_process.spawn`.\n     *\n     * @type {import('node:child_process').IOType | import('node:stream').Stream | number}\n     *\n     * The default is \"inherit\", meaning messages to stderr will be printed to the parent process's stderr.\n     */\n    stderr: z.ZodOptional<z.ZodAny>;\n}>, \"strip\", z.ZodTypeAny, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}, {\n    command: string;\n    args: string[];\n    iconPath?: string | undefined;\n    type?: \"stdio\" | undefined;\n    env?: Record<string, string> | undefined;\n    stderr?: any;\n}>, z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"websocket\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"websocket\" | undefined;\n}>, z.ZodObject<z.objectUtil.extendShape<{\n    iconPath: z.ZodOptional<z.ZodString>;\n}, {\n    type: z.ZodOptional<z.ZodLiteral<\"sse\">>;\n    url: z.ZodEffects<z.ZodString, string, string>;\n}>, \"strip\", z.ZodTypeAny, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}, {\n    url: string;\n    iconPath?: string | undefined;\n    type?: \"sse\" | undefined;\n}>]>>;\n"}}
