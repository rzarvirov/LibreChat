{"code":"export * from './schemas';\n//# sourceMappingURL=types.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/node_modules/openai/index.d.ts","/Users/romanzarvirov/aibuddy/LibreChat/node_modules/@tanstack/react-query/build/lib/index.d.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/schemas.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/schemas.ts"],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/types.ts\"],\"names\":[],\"mappings\":\"AAcA,cAAc,WAAW,CAAC\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/types.d.ts","writeByteOrderMark":false,"text":"import type OpenAI from 'openai';\nimport type { InfiniteData } from '@tanstack/react-query';\nimport type { TMessage, TResPlugin, ImageDetail, TSharedLink, TConversation, EModelEndpoint, TConversationTag, TBanner } from './schemas';\nexport type TOpenAIMessage = OpenAI.Chat.ChatCompletionMessageParam;\nexport * from './schemas';\nexport type TMessages = TMessage[];\nexport type TEndpointOption = {\n    endpoint: EModelEndpoint;\n    endpointType?: EModelEndpoint;\n    modelDisplayLabel?: string;\n    resendFiles?: boolean;\n    promptCache?: boolean;\n    maxContextTokens?: number;\n    imageDetail?: ImageDetail;\n    model?: string | null;\n    promptPrefix?: string;\n    temperature?: number;\n    chatGptLabel?: string | null;\n    modelLabel?: string | null;\n    jailbreak?: boolean;\n    key?: string | null;\n    thread_id?: string;\n    overrideConvoId?: string;\n    overrideUserMessageId?: string;\n};\nexport type TPayload = Partial<TMessage> & Partial<TEndpointOption> & {\n    isContinued: boolean;\n    conversationId: string | null;\n    messages?: TMessages;\n};\nexport type TSubmission = {\n    artifacts?: string;\n    plugin?: TResPlugin;\n    plugins?: TResPlugin[];\n    userMessage: TMessage;\n    isEdited?: boolean;\n    isContinued?: boolean;\n    messages: TMessage[];\n    isRegenerate?: boolean;\n    conversationId?: string;\n    initialResponse?: TMessage;\n    conversation: Partial<TConversation>;\n    endpointOption: TEndpointOption;\n    clientTimestamp?: string;\n};\nexport type EventSubmission = Omit<TSubmission, 'initialResponse'> & {\n    initialResponse: TMessage;\n};\nexport type TPluginAction = {\n    pluginKey: string;\n    action: 'install' | 'uninstall';\n    auth?: unknown;\n    isEntityTool?: boolean;\n};\nexport type GroupedConversations = [key: string, TConversation[]][];\nexport type TUpdateUserPlugins = {\n    isEntityTool?: boolean;\n    pluginKey: string;\n    action: string;\n    auth?: unknown;\n};\nexport type TCategory = {\n    id?: string;\n    value: string;\n    label: string;\n};\nexport type TError = {\n    message: string;\n    code?: number | string;\n    response?: {\n        data?: {\n            message?: string;\n        };\n        status?: number;\n    };\n};\nexport type TUser = {\n    id: string;\n    username: string;\n    email: string;\n    name: string;\n    avatar: string;\n    role: string;\n    provider: string;\n    plugins?: string[];\n    createdAt: string;\n    updatedAt: string;\n};\nexport type TGetConversationsResponse = {\n    conversations: TConversation[];\n    pageNumber: string;\n    pageSize: string | number;\n    pages: string | number;\n};\nexport type TUpdateMessageRequest = {\n    conversationId: string;\n    messageId: string;\n    model: string;\n    text: string;\n};\nexport type TUpdateMessageContent = {\n    conversationId: string;\n    messageId: string;\n    index: number;\n    text: string;\n};\nexport type TUpdateUserKeyRequest = {\n    name: string;\n    value: string;\n    expiresAt: string;\n};\nexport type TUpdateConversationRequest = {\n    conversationId: string;\n    title: string;\n};\nexport type TUpdateConversationResponse = TConversation;\nexport type TDeleteConversationRequest = {\n    conversationId?: string;\n    thread_id?: string;\n    endpoint?: string;\n    source?: string;\n};\nexport type TDeleteConversationResponse = {\n    acknowledged: boolean;\n    deletedCount: number;\n    messages: {\n        acknowledged: boolean;\n        deletedCount: number;\n    };\n};\nexport type TArchiveConversationRequest = {\n    conversationId: string;\n    isArchived: boolean;\n};\nexport type TArchiveConversationResponse = TConversation;\nexport type TSharedMessagesResponse = Omit<TSharedLink, 'messages'> & {\n    messages: TMessage[];\n};\nexport type TCreateShareLinkRequest = Pick<TConversation, 'conversationId'>;\nexport type TUpdateShareLinkRequest = Pick<TSharedLink, 'shareId'>;\nexport type TSharedLinkResponse = Pick<TSharedLink, 'shareId'> & Pick<TConversation, 'conversationId'>;\nexport type TSharedLinkGetResponse = TSharedLinkResponse & {\n    success: boolean;\n};\nexport type TConversationTagsResponse = TConversationTag[];\nexport type TConversationTagRequest = Partial<Omit<TConversationTag, 'createdAt' | 'updatedAt' | 'count' | 'user'>> & {\n    conversationId?: string;\n    addToConversation?: boolean;\n};\nexport type TConversationTagResponse = TConversationTag;\nexport type TTagConversationRequest = {\n    tags: string[];\n    tag: string;\n};\nexport type TTagConversationResponse = string[];\nexport type TDuplicateConvoRequest = {\n    conversationId?: string;\n};\nexport type TDuplicateConvoResponse = {\n    conversation: TConversation;\n    messages: TMessage[];\n};\nexport type TForkConvoRequest = {\n    messageId: string;\n    conversationId: string;\n    option?: string;\n    splitAtTarget?: boolean;\n    latestMessageId?: string;\n};\nexport type TForkConvoResponse = {\n    conversation: TConversation;\n    messages: TMessage[];\n};\nexport type TSearchResults = {\n    conversations: TConversation[];\n    messages: TMessage[];\n    pageNumber: string;\n    pageSize: string | number;\n    pages: string | number;\n    filter: object;\n};\nexport type TConfig = {\n    order: number;\n    type?: EModelEndpoint;\n    azure?: boolean;\n    availableTools?: [];\n    availableRegions?: string[];\n    plugins?: Record<string, string>;\n    name?: string;\n    iconURL?: string;\n    version?: string;\n    modelDisplayLabel?: string;\n    userProvide?: boolean | null;\n    userProvideURL?: boolean | null;\n    disableBuilder?: boolean;\n    retrievalModels?: string[];\n    capabilities?: string[];\n};\nexport type TEndpointsConfig = Record<EModelEndpoint | string, TConfig | null | undefined> | undefined;\nexport type TModelsConfig = Record<string, string[]>;\nexport type TUpdateTokenCountResponse = {\n    count: number;\n};\nexport type TMessageTreeNode = object;\nexport type TSearchMessage = object;\nexport type TSearchMessageTreeNode = object;\nexport type TRegisterUserResponse = {\n    message: string;\n};\nexport type TRegisterUser = {\n    name: string;\n    email: string;\n    username: string;\n    password: string;\n    confirm_password?: string;\n    token?: string;\n};\nexport type TLoginUser = {\n    email: string;\n    password: string;\n};\nexport type TLoginResponse = {\n    token: string;\n    user: TUser;\n};\nexport type TRequestPasswordReset = {\n    email: string;\n};\nexport type TResetPassword = {\n    userId: string;\n    token: string;\n    password: string;\n    confirm_password?: string;\n};\nexport type VerifyEmailResponse = {\n    message: string;\n};\nexport type TVerifyEmail = {\n    email: string;\n    token: string;\n};\nexport type TResendVerificationEmail = Omit<TVerifyEmail, 'token'>;\nexport type TRefreshTokenResponse = {\n    token: string;\n    user: TUser;\n};\nexport type TCheckUserKeyResponse = {\n    expiresAt: string;\n};\nexport type TRequestPasswordResetResponse = {\n    link?: string;\n    message?: string;\n};\n/**\n * Represents the response from the import endpoint.\n */\nexport type TImportResponse = {\n    /**\n     * The message associated with the response.\n     */\n    message: string;\n};\n/** Prompts */\nexport type TPrompt = {\n    groupId: string;\n    author: string;\n    prompt: string;\n    type: 'text' | 'chat';\n    createdAt: string;\n    updatedAt: string;\n    _id?: string;\n};\nexport type TPromptGroup = {\n    name: string;\n    numberOfGenerations?: number;\n    command?: string;\n    oneliner?: string;\n    category?: string;\n    projectIds?: string[];\n    productionId?: string | null;\n    productionPrompt?: Pick<TPrompt, 'prompt'> | null;\n    author: string;\n    authorName: string;\n    createdAt?: Date;\n    updatedAt?: Date;\n    _id?: string;\n};\nexport type TCreatePrompt = {\n    prompt: Pick<TPrompt, 'prompt' | 'type'> & {\n        groupId?: string;\n    };\n    group?: {\n        name: string;\n        category?: string;\n        oneliner?: string;\n        command?: string;\n    };\n};\nexport type TCreatePromptRecord = TCreatePrompt & Pick<TPromptGroup, 'author' | 'authorName'>;\nexport type TPromptsWithFilterRequest = {\n    groupId: string;\n    tags?: string[];\n    projectId?: string;\n    version?: number;\n};\nexport type TPromptGroupsWithFilterRequest = {\n    category: string;\n    pageNumber: string;\n    pageSize: string | number;\n    before?: string | null;\n    after?: string | null;\n    order?: 'asc' | 'desc';\n    name?: string;\n    author?: string;\n};\nexport type PromptGroupListResponse = {\n    promptGroups: TPromptGroup[];\n    pageNumber: string;\n    pageSize: string | number;\n    pages: string | number;\n};\nexport type PromptGroupListData = InfiniteData<PromptGroupListResponse>;\nexport type TCreatePromptResponse = {\n    prompt: TPrompt;\n    group?: TPromptGroup;\n};\nexport type TUpdatePromptGroupPayload = Partial<TPromptGroup> & {\n    removeProjectIds?: string[];\n};\nexport type TUpdatePromptGroupVariables = {\n    id: string;\n    payload: TUpdatePromptGroupPayload;\n};\nexport type TUpdatePromptGroupResponse = TPromptGroup;\nexport type TDeletePromptResponse = {\n    prompt: string;\n    promptGroup?: {\n        message: string;\n        id: string;\n    };\n};\nexport type TDeletePromptVariables = {\n    _id: string;\n    groupId: string;\n};\nexport type TMakePromptProductionResponse = {\n    message: string;\n};\nexport type TMakePromptProductionRequest = {\n    id: string;\n    groupId: string;\n    productionPrompt: Pick<TPrompt, 'prompt'>;\n};\nexport type TUpdatePromptLabelsRequest = {\n    id: string;\n    payload: {\n        labels: string[];\n    };\n};\nexport type TUpdatePromptLabelsResponse = {\n    message: string;\n};\nexport type TDeletePromptGroupResponse = TUpdatePromptLabelsResponse;\nexport type TDeletePromptGroupRequest = {\n    id: string;\n};\nexport type TGetCategoriesResponse = TCategory[];\nexport type TGetRandomPromptsResponse = {\n    prompts: TPromptGroup[];\n};\nexport type TGetRandomPromptsRequest = {\n    limit: number;\n    skip: number;\n};\nexport type TCustomConfigSpeechResponse = {\n    [key: string]: string;\n};\nexport type TUserTermsResponse = {\n    termsAccepted: boolean;\n};\nexport type TAcceptTermsResponse = {\n    success: boolean;\n};\nexport type TBannerResponse = TBanner | null;\n"}}
