{"code":"export var FileSources;\n(function (FileSources) {\n    FileSources[\"local\"] = \"local\";\n    FileSources[\"firebase\"] = \"firebase\";\n    FileSources[\"azure\"] = \"azure\";\n    FileSources[\"openai\"] = \"openai\";\n    FileSources[\"s3\"] = \"s3\";\n    FileSources[\"vectordb\"] = \"vectordb\";\n    FileSources[\"execute_code\"] = \"execute_code\";\n})(FileSources || (FileSources = {}));\nexport var checkOpenAIStorage = function (source) {\n    return source === FileSources.openai || source === FileSources.azure;\n};\nexport var FileContext;\n(function (FileContext) {\n    FileContext[\"avatar\"] = \"avatar\";\n    FileContext[\"unknown\"] = \"unknown\";\n    FileContext[\"agents\"] = \"agents\";\n    FileContext[\"assistants\"] = \"assistants\";\n    FileContext[\"execute_code\"] = \"execute_code\";\n    FileContext[\"image_generation\"] = \"image_generation\";\n    FileContext[\"assistants_output\"] = \"assistants_output\";\n    FileContext[\"message_attachment\"] = \"message_attachment\";\n    FileContext[\"filename\"] = \"filename\";\n    FileContext[\"updatedAt\"] = \"updatedAt\";\n    FileContext[\"source\"] = \"source\";\n    FileContext[\"filterSource\"] = \"filterSource\";\n    FileContext[\"context\"] = \"context\";\n    FileContext[\"bytes\"] = \"bytes\";\n})(FileContext || (FileContext = {}));\n//# sourceMappingURL=files.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types/assistants.ts"],"map":"{\"version\":3,\"file\":\"files.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/files.ts\"],\"names\":[],\"mappings\":\"AAEA,MAAM,CAAN,IAAY,WAQX;AARD,WAAY,WAAW;IACrB,8BAAe,CAAA;IACf,oCAAqB,CAAA;IACrB,8BAAe,CAAA;IACf,gCAAiB,CAAA;IACjB,wBAAS,CAAA;IACT,oCAAqB,CAAA;IACrB,4CAA6B,CAAA;AAC/B,CAAC,EARW,WAAW,KAAX,WAAW,QAQtB;AAED,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAAC,MAAc;IAC/C,OAAA,MAAM,KAAK,WAAW,CAAC,MAAM,IAAI,MAAM,KAAK,WAAW,CAAC,KAAK;AAA7D,CAA6D,CAAC;AAEhE,MAAM,CAAN,IAAY,WAeX;AAfD,WAAY,WAAW;IACrB,gCAAiB,CAAA;IACjB,kCAAmB,CAAA;IACnB,gCAAiB,CAAA;IACjB,wCAAyB,CAAA;IACzB,4CAA6B,CAAA;IAC7B,oDAAqC,CAAA;IACrC,sDAAuC,CAAA;IACvC,wDAAyC,CAAA;IACzC,oCAAqB,CAAA;IACrB,sCAAuB,CAAA;IACvB,gCAAiB,CAAA;IACjB,4CAA6B,CAAA;IAC7B,kCAAmB,CAAA;IACnB,8BAAe,CAAA;AACjB,CAAC,EAfW,WAAW,KAAX,WAAW,QAetB\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/types/files.d.ts","writeByteOrderMark":false,"text":"import { EToolResources } from './assistants';\nexport declare enum FileSources {\n    local = \"local\",\n    firebase = \"firebase\",\n    azure = \"azure\",\n    openai = \"openai\",\n    s3 = \"s3\",\n    vectordb = \"vectordb\",\n    execute_code = \"execute_code\"\n}\nexport declare const checkOpenAIStorage: (source: string) => boolean;\nexport declare enum FileContext {\n    avatar = \"avatar\",\n    unknown = \"unknown\",\n    agents = \"agents\",\n    assistants = \"assistants\",\n    execute_code = \"execute_code\",\n    image_generation = \"image_generation\",\n    assistants_output = \"assistants_output\",\n    message_attachment = \"message_attachment\",\n    filename = \"filename\",\n    updatedAt = \"updatedAt\",\n    source = \"source\",\n    filterSource = \"filterSource\",\n    context = \"context\",\n    bytes = \"bytes\"\n}\nexport type EndpointFileConfig = {\n    disabled?: boolean;\n    fileLimit?: number;\n    fileSizeLimit?: number;\n    totalSizeLimit?: number;\n    supportedMimeTypes?: RegExp[];\n};\nexport type FileConfig = {\n    endpoints: {\n        [key: string]: EndpointFileConfig;\n    };\n    serverFileSizeLimit?: number;\n    avatarSizeLimit?: number;\n    checkType?: (fileType: string, supportedTypes: RegExp[]) => boolean;\n};\nexport type TFile = {\n    _id?: string;\n    __v?: number;\n    user: string;\n    conversationId?: string;\n    message?: string;\n    file_id: string;\n    temp_file_id?: string;\n    bytes: number;\n    embedded: boolean;\n    filename: string;\n    filepath: string;\n    object: 'file';\n    type: string;\n    usage: number;\n    context?: FileContext;\n    source?: FileSources;\n    filterSource?: FileSources;\n    width?: number;\n    height?: number;\n    expiresAt?: string | Date;\n    preview?: string;\n    metadata?: {\n        fileIdentifier?: string;\n    };\n    createdAt?: string | Date;\n    updatedAt?: string | Date;\n};\nexport type TFileUpload = TFile & {\n    temp_file_id: string;\n};\nexport type AvatarUploadResponse = {\n    url: string;\n};\nexport type SpeechToTextResponse = {\n    text: string;\n};\nexport type VoiceResponse = string[];\nexport type UploadMutationOptions = {\n    onSuccess?: (data: TFileUpload, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type UploadAvatarOptions = {\n    onSuccess?: (data: AvatarUploadResponse, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type SpeechToTextOptions = {\n    onSuccess?: (data: SpeechToTextResponse, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type TextToSpeechOptions = {\n    onSuccess?: (data: ArrayBuffer, variables: FormData, context?: unknown) => void;\n    onMutate?: (variables: FormData) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: FormData, context?: unknown) => void;\n};\nexport type VoiceOptions = {\n    onSuccess?: (data: VoiceResponse, variables: unknown, context?: unknown) => void;\n    onMutate?: () => void | Promise<unknown>;\n    onError?: (error: unknown, variables: unknown, context?: unknown) => void;\n};\nexport type DeleteFilesResponse = {\n    message: string;\n    result: Record<string, unknown>;\n};\nexport type BatchFile = {\n    file_id: string;\n    filepath: string;\n    embedded: boolean;\n    source: FileSources;\n};\nexport type DeleteFilesBody = {\n    files: BatchFile[];\n    agent_id?: string;\n    assistant_id?: string;\n    tool_resource?: EToolResources;\n};\nexport type DeleteMutationOptions = {\n    onSuccess?: (data: DeleteFilesResponse, variables: DeleteFilesBody, context?: unknown) => void;\n    onMutate?: (variables: DeleteFilesBody) => void | Promise<unknown>;\n    onError?: (error: unknown, variables: DeleteFilesBody, context?: unknown) => void;\n};\n"}}
