{"code":"import { __assign, __rest } from \"tslib\";\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { initialModelsConfig } from '../config';\nimport { defaultOrderQuery } from '../types/assistants';\nimport * as dataService from '../data-service';\nimport { QueryKeys } from '../keys';\nimport request from '../request';\nimport * as s from '../schemas';\nexport var useAbortRequestWithMessage = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function (_a) {\n        var endpoint = _a.endpoint, abortKey = _a.abortKey, message = _a.message;\n        return dataService.abortRequestWithMessage(endpoint, abortKey, message);\n    }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.balance]);\n        },\n    });\n};\nexport var useGetUserQuery = function (config) {\n    return useQuery([QueryKeys.user], function () { return dataService.getUser(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false, retry: false }, config));\n};\nexport var useGetMessagesByConvoId = function (id, config) {\n    return useQuery([QueryKeys.messages, id], function () { return dataService.getMessagesByConvoId(id); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetSharedMessages = function (shareId, config) {\n    return useQuery([QueryKeys.sharedMessages, shareId], function () { return dataService.getSharedMessages(shareId); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetSharedLinkQuery = function (conversationId, config) {\n    var queryClient = useQueryClient();\n    return useQuery([QueryKeys.sharedLinks, conversationId], function () { return dataService.getSharedLink(conversationId); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false, onSuccess: function (data) {\n            queryClient.setQueryData([QueryKeys.sharedLinks, conversationId], {\n                conversationId: data.conversationId,\n                shareId: data.shareId,\n            });\n        } }, config));\n};\nexport var useGetUserBalance = function (config) {\n    return useQuery([QueryKeys.balance], function () { return dataService.getUserBalance(); }, __assign({ refetchOnWindowFocus: true, refetchOnReconnect: true, refetchOnMount: true }, config));\n};\nexport var useGetConversationByIdQuery = function (id, config) {\n    return useQuery([QueryKeys.conversation, id], function () { return dataService.getConversationById(id); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\n//This isn't ideal because its just a query and we're using mutation, but it was the only way\n//to make it work with how the Chat component is structured\nexport var useGetConversationByIdMutation = function (id) {\n    var queryClient = useQueryClient();\n    return useMutation(function () { return dataService.getConversationById(id); }, {\n        // onSuccess: (res: s.TConversation) => {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.conversation, id]);\n        },\n    });\n};\nexport var useUpdateMessageMutation = function (id) {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.updateMessage(payload); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.messages, id]);\n        },\n    });\n};\nexport var useUpdateMessageContentMutation = function (conversationId) {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.updateMessageContent(payload); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.messages, conversationId]);\n        },\n    });\n};\nexport var useUpdateUserKeysMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.updateUserKey(payload); }, {\n        onSuccess: function (data, variables) {\n            queryClient.invalidateQueries([QueryKeys.name, variables.name]);\n        },\n    });\n};\nexport var useClearConversationsMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function () { return dataService.clearAllConversations(); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.allConversations]);\n        },\n    });\n};\nexport var useRevokeUserKeyMutation = function (name) {\n    var queryClient = useQueryClient();\n    return useMutation(function () { return dataService.revokeUserKey(name); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.name, name]);\n            if (s.isAssistantsEndpoint(name)) {\n                queryClient.invalidateQueries([QueryKeys.assistants, name, defaultOrderQuery]);\n                queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n                queryClient.invalidateQueries([QueryKeys.assistants]);\n                queryClient.invalidateQueries([QueryKeys.assistant]);\n                queryClient.invalidateQueries([QueryKeys.actions]);\n                queryClient.invalidateQueries([QueryKeys.tools]);\n            }\n        },\n    });\n};\nexport var useRevokeAllUserKeysMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function () { return dataService.revokeAllUserKeys(); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.name]);\n            queryClient.invalidateQueries([\n                QueryKeys.assistants,\n                s.EModelEndpoint.assistants,\n                defaultOrderQuery,\n            ]);\n            queryClient.invalidateQueries([\n                QueryKeys.assistants,\n                s.EModelEndpoint.azureAssistants,\n                defaultOrderQuery,\n            ]);\n            queryClient.invalidateQueries([QueryKeys.assistantDocs]);\n            queryClient.invalidateQueries([QueryKeys.assistants]);\n            queryClient.invalidateQueries([QueryKeys.assistant]);\n            queryClient.invalidateQueries([QueryKeys.actions]);\n            queryClient.invalidateQueries([QueryKeys.tools]);\n        },\n    });\n};\nexport var useGetSearchEnabledQuery = function (config) {\n    return useQuery([QueryKeys.searchEnabled], function () { return dataService.getSearchEnabled(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetEndpointsQuery = function (config) {\n    return useQuery([QueryKeys.endpoints], function () { return dataService.getAIEndpoints(); }, __assign({ staleTime: Infinity, refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetModelsQuery = function (config) {\n    return useQuery([QueryKeys.models], function () { return dataService.getModels(); }, __assign({ initialData: initialModelsConfig, refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false, staleTime: Infinity }, config));\n};\nexport var useCreatePresetMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.createPreset(payload); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.presets]);\n        },\n    });\n};\nexport var useDeletePresetMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.deletePreset(payload); }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.presets]);\n        },\n    });\n};\nexport var useSearchQuery = function (searchQuery, pageNumber, config) {\n    return useQuery([QueryKeys.searchResults, pageNumber, searchQuery], function () { return dataService.searchConversations(searchQuery, pageNumber); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useUpdateTokenCountMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function (_a) {\n        var text = _a.text;\n        return dataService.updateTokenCount(text);\n    }, {\n        onSuccess: function () {\n            queryClient.invalidateQueries([QueryKeys.tokenCount]);\n        },\n    });\n};\nexport var useRegisterUserMutation = function (options) {\n    var queryClient = useQueryClient();\n    return useMutation(function (payload) { return dataService.register(payload); }, __assign(__assign({}, options), { onSuccess: function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            queryClient.invalidateQueries([QueryKeys.user]);\n            if (options === null || options === void 0 ? void 0 : options.onSuccess) {\n                options.onSuccess.apply(options, args);\n            }\n        } }));\n};\nexport var useRefreshTokenMutation = function () {\n    var queryClient = useQueryClient();\n    return useMutation(function () { return request.refreshToken(); }, {\n        onMutate: function () {\n            queryClient.removeQueries();\n        },\n    });\n};\nexport var useUserKeyQuery = function (name, config) {\n    return useQuery([QueryKeys.name, name], function () {\n        if (!name) {\n            return Promise.resolve({ expiresAt: '' });\n        }\n        return dataService.userKeyQuery(name);\n    }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false, retry: false }, config));\n};\nexport var useRequestPasswordResetMutation = function () {\n    return useMutation(function (payload) {\n        return dataService.requestPasswordReset(payload);\n    });\n};\nexport var useResetPasswordMutation = function () {\n    return useMutation(function (payload) { return dataService.resetPassword(payload); });\n};\nexport var useAvailablePluginsQuery = function (config) {\n    return useQuery([QueryKeys.availablePlugins], function () { return dataService.getAvailablePlugins(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useUpdateUserPluginsMutation = function (_options) {\n    var queryClient = useQueryClient();\n    var _a = _options !== null && _options !== void 0 ? _options : {}, onSuccess = _a.onSuccess, options = __rest(_a, [\"onSuccess\"]);\n    return useMutation(function (payload) { return dataService.updateUserPlugins(payload); }, __assign(__assign({}, options), { onSuccess: function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            queryClient.invalidateQueries([QueryKeys.user]);\n            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess.apply(void 0, args);\n        } }));\n};\nexport var useGetStartupConfig = function (config) {\n    return useQuery([QueryKeys.startupConfig], function () { return dataService.getStartupConfig(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetCustomConfigSpeechQuery = function (config) {\n    return useQuery([QueryKeys.customConfigSpeech], function () { return dataService.getCustomConfigSpeech(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\nexport var useGetBannerQuery = function (config) {\n    return useQuery([QueryKeys.banner], function () { return dataService.getBanner(); }, __assign({ refetchOnWindowFocus: false, refetchOnReconnect: false, refetchOnMount: false }, config));\n};\n//# sourceMappingURL=react-query-service.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/node_modules/@tanstack/react-query/build/lib/index.d.ts","/Users/romanzarvirov/aibuddy/LibreChat/node_modules/@tanstack/react-query/build/lib/index.d.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/config.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/config.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types/assistants.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/data-service.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types/mutations.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/keys.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/request.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/schemas.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types.ts"],"map":"{\"version\":3,\"file\":\"react-query-service.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/react-query/react-query-service.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/react-query/react-query-service.d.ts","writeByteOrderMark":false,"text":"import type { UseQueryOptions, UseMutationResult, QueryObserverResult } from '@tanstack/react-query';\nimport type { TStartupConfig } from '../config';\nimport * as m from '../types/mutations';\nimport * as s from '../schemas';\nimport * as t from '../types';\nexport declare const useAbortRequestWithMessage: () => UseMutationResult<void, Error, {\n    endpoint: string;\n    abortKey: string;\n    message: string;\n}>;\nexport declare const useGetUserQuery: (config?: UseQueryOptions<t.TUser>) => QueryObserverResult<t.TUser>;\nexport declare const useGetMessagesByConvoId: <TData = s.TMessage[]>(id: string, config?: UseQueryOptions<s.TMessage[], unknown, TData, import(\"@tanstack/react-query\").QueryKey> | undefined) => QueryObserverResult<TData>;\nexport declare const useGetSharedMessages: (shareId: string, config?: UseQueryOptions<t.TSharedMessagesResponse>) => QueryObserverResult<t.TSharedMessagesResponse>;\nexport declare const useGetSharedLinkQuery: (conversationId: string, config?: UseQueryOptions<t.TSharedLinkGetResponse>) => QueryObserverResult<t.TSharedLinkGetResponse>;\nexport declare const useGetUserBalance: (config?: UseQueryOptions<string>) => QueryObserverResult<string>;\nexport declare const useGetConversationByIdQuery: (id: string, config?: UseQueryOptions<s.TConversation>) => QueryObserverResult<s.TConversation>;\nexport declare const useGetConversationByIdMutation: (id: string) => UseMutationResult<s.TConversation>;\nexport declare const useUpdateMessageMutation: (id: string) => UseMutationResult<unknown, unknown, t.TUpdateMessageRequest, unknown>;\nexport declare const useUpdateMessageContentMutation: (conversationId: string) => UseMutationResult<unknown, unknown, t.TUpdateMessageContent, unknown>;\nexport declare const useUpdateUserKeysMutation: () => UseMutationResult<t.TUser, unknown, t.TUpdateUserKeyRequest, unknown>;\nexport declare const useClearConversationsMutation: () => UseMutationResult<unknown>;\nexport declare const useRevokeUserKeyMutation: (name: string) => UseMutationResult<unknown>;\nexport declare const useRevokeAllUserKeysMutation: () => UseMutationResult<unknown>;\nexport declare const useGetSearchEnabledQuery: (config?: UseQueryOptions<boolean>) => QueryObserverResult<boolean>;\nexport declare const useGetEndpointsQuery: <TData = t.TEndpointsConfig>(config?: UseQueryOptions<t.TEndpointsConfig, unknown, TData, import(\"@tanstack/react-query\").QueryKey> | undefined) => QueryObserverResult<TData>;\nexport declare const useGetModelsQuery: (config?: UseQueryOptions<t.TModelsConfig>) => QueryObserverResult<t.TModelsConfig>;\nexport declare const useCreatePresetMutation: () => UseMutationResult<s.TPreset, unknown, s.TPreset, unknown>;\nexport declare const useDeletePresetMutation: () => UseMutationResult<m.PresetDeleteResponse, unknown, s.TPreset | undefined, unknown>;\nexport declare const useSearchQuery: (searchQuery: string, pageNumber: string, config?: UseQueryOptions<t.TSearchResults>) => QueryObserverResult<t.TSearchResults>;\nexport declare const useUpdateTokenCountMutation: () => UseMutationResult<t.TUpdateTokenCountResponse, unknown, {\n    text: string;\n}, unknown>;\nexport declare const useRegisterUserMutation: (options?: m.RegistrationOptions) => UseMutationResult<t.TError, unknown, t.TRegisterUser, unknown>;\nexport declare const useRefreshTokenMutation: () => UseMutationResult<t.TRefreshTokenResponse | undefined, unknown, unknown, unknown>;\nexport declare const useUserKeyQuery: (name: string, config?: UseQueryOptions<t.TCheckUserKeyResponse>) => QueryObserverResult<t.TCheckUserKeyResponse>;\nexport declare const useRequestPasswordResetMutation: () => UseMutationResult<t.TRequestPasswordResetResponse, unknown, t.TRequestPasswordReset, unknown>;\nexport declare const useResetPasswordMutation: () => UseMutationResult<unknown, unknown, t.TResetPassword, unknown>;\nexport declare const useAvailablePluginsQuery: <TData = {\n    name: string;\n    pluginKey: string;\n    description: string;\n    icon?: string | undefined;\n    authConfig?: {\n        description: string;\n        authField: string;\n        label: string;\n    }[] | undefined;\n    authenticated?: boolean | undefined;\n    isButton?: boolean | undefined;\n}[]>(config?: UseQueryOptions<{\n    name: string;\n    pluginKey: string;\n    description: string;\n    icon?: string | undefined;\n    authConfig?: {\n        description: string;\n        authField: string;\n        label: string;\n    }[] | undefined;\n    authenticated?: boolean | undefined;\n    isButton?: boolean | undefined;\n}[], unknown, TData, import(\"@tanstack/react-query\").QueryKey> | undefined) => QueryObserverResult<TData>;\nexport declare const useUpdateUserPluginsMutation: (_options?: m.UpdatePluginAuthOptions) => UseMutationResult<t.TUser, unknown, t.TUpdateUserPlugins, unknown>;\nexport declare const useGetStartupConfig: (config?: UseQueryOptions<TStartupConfig>) => QueryObserverResult<TStartupConfig>;\nexport declare const useGetCustomConfigSpeechQuery: (config?: UseQueryOptions<t.TCustomConfigSpeechResponse>) => QueryObserverResult<t.TCustomConfigSpeechResponse>;\nexport declare const useGetBannerQuery: (config?: UseQueryOptions<t.TBannerResponse>) => QueryObserverResult<t.TBannerResponse>;\n"}}
