{"code":"import { Tools, } from './assistants';\n//# sourceMappingURL=mutations.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/roles.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/types/assistants.ts"],"map":"{\"version\":3,\"file\":\"mutations.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/mutations.ts\"],\"names\":[],\"mappings\":\"AAEA,OAAO,EACL,KAAK,GAWN,MAAM,cAAc,CAAC\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/types/mutations.d.ts","writeByteOrderMark":false,"text":"import * as types from '../types';\nimport * as r from '../roles';\nimport { Tools, Assistant, AssistantCreateParams, AssistantUpdateParams, ActionMetadata, FunctionTool, AssistantDocument, Action, Agent, AgentCreateParams, AgentUpdateParams } from './assistants';\nexport type MutationOptions<Response, Request, Context = unknown, Error = unknown, Snapshot = void> = {\n    onSuccess?: (data: Response, variables: Request, context?: Context) => void;\n    onMutate?: (variables: Request) => Snapshot | Promise<Snapshot>;\n    onError?: (error: Error, variables: Request, context?: Context, snapshot?: Snapshot) => void;\n    onSettled?: (data: Response | undefined, error: Error | null, variables: Request, context?: Context) => void;\n};\nexport type TGenTitleRequest = {\n    conversationId: string;\n};\nexport type TGenTitleResponse = {\n    title: string;\n};\nexport type PresetDeleteResponse = {\n    acknowledged: boolean;\n    deletedCount: number;\n};\nexport type UpdatePresetOptions = MutationOptions<types.TPreset, types.TPreset>;\nexport type DeletePresetOptions = MutationOptions<PresetDeleteResponse, types.TPreset | undefined>;\nexport type LogoutOptions = MutationOptions<unknown, undefined>;\nexport type AssistantAvatarVariables = {\n    assistant_id: string;\n    model: string;\n    formData: FormData;\n    postCreation?: boolean;\n    endpoint: types.AssistantsEndpoint;\n    version: number | string;\n};\nexport type UpdateActionVariables = {\n    assistant_id: string;\n    functions: FunctionTool[];\n    metadata: ActionMetadata;\n    action_id?: string;\n    model: string;\n    endpoint: types.AssistantsEndpoint;\n    version: number | string;\n};\nexport type UploadAssistantAvatarOptions = MutationOptions<Assistant, AssistantAvatarVariables>;\nexport type CreateAssistantMutationOptions = MutationOptions<Assistant, AssistantCreateParams>;\nexport type UpdateAssistantVariables = {\n    assistant_id: string;\n    data: AssistantUpdateParams;\n};\nexport type UpdateAssistantMutationOptions = MutationOptions<Assistant, UpdateAssistantVariables>;\nexport type DeleteAssistantBody = {\n    assistant_id: string;\n    model: string;\n    endpoint: types.AssistantsEndpoint;\n};\nexport type DeleteAssistantMutationOptions = MutationOptions<void, Pick<DeleteAssistantBody, 'assistant_id'>>;\nexport type UpdateActionResponse = [AssistantDocument, Assistant, Action];\nexport type UpdateActionOptions = MutationOptions<UpdateActionResponse, UpdateActionVariables>;\nexport type DeleteActionVariables = {\n    endpoint: types.AssistantsEndpoint;\n    assistant_id: string;\n    action_id: string;\n    model: string;\n};\nexport type DeleteActionOptions = MutationOptions<void, DeleteActionVariables>;\nexport type AgentAvatarVariables = {\n    agent_id: string;\n    formData: FormData;\n    postCreation?: boolean;\n};\nexport type UpdateAgentActionVariables = {\n    agent_id: string;\n    action_id?: string;\n    metadata: ActionMetadata;\n    functions: FunctionTool[];\n};\nexport type UploadAgentAvatarOptions = MutationOptions<Agent, AgentAvatarVariables>;\nexport type CreateAgentMutationOptions = MutationOptions<Agent, AgentCreateParams>;\nexport type UpdateAgentVariables = {\n    agent_id: string;\n    data: AgentUpdateParams;\n};\nexport type UpdateAgentMutationOptions = MutationOptions<Agent, UpdateAgentVariables>;\nexport type DuplicateAgentBody = {\n    agent_id: string;\n};\nexport type DuplicateAgentMutationOptions = MutationOptions<{\n    agent: Agent;\n    actions: Action[];\n}, Pick<DuplicateAgentBody, 'agent_id'>>;\nexport type DeleteAgentBody = {\n    agent_id: string;\n};\nexport type DeleteAgentMutationOptions = MutationOptions<void, Pick<DeleteAgentBody, 'agent_id'>>;\nexport type UpdateAgentActionResponse = [Agent, Action];\nexport type UpdateAgentActionOptions = MutationOptions<UpdateAgentActionResponse, UpdateAgentActionVariables>;\nexport type DeleteAgentActionVariables = {\n    agent_id: string;\n    action_id: string;\n};\nexport type DeleteAgentActionOptions = MutationOptions<void, DeleteAgentActionVariables>;\nexport type DeleteConversationOptions = MutationOptions<types.TDeleteConversationResponse, types.TDeleteConversationRequest>;\nexport type DuplicateConvoOptions = MutationOptions<types.TDuplicateConvoResponse, types.TDuplicateConvoRequest>;\nexport type ForkConvoOptions = MutationOptions<types.TForkConvoResponse, types.TForkConvoRequest>;\nexport type CreateSharedLinkOptions = MutationOptions<types.TSharedLink, Partial<types.TSharedLink>>;\nexport type updateTagsInConvoOptions = MutationOptions<types.TTagConversationResponse, types.TTagConversationRequest>;\nexport type UpdateSharedLinkOptions = MutationOptions<types.TSharedLink, Partial<types.TSharedLink>>;\nexport type ArchiveConvoOptions = MutationOptions<types.TArchiveConversationResponse, types.TArchiveConversationRequest>;\nexport type DeleteSharedLinkContext = {\n    previousQueries?: Map<string, TDeleteSharedLinkResponse>;\n};\nexport type DeleteSharedLinkOptions = MutationOptions<TDeleteSharedLinkResponse, {\n    shareId: string;\n}, DeleteSharedLinkContext>;\nexport type TUpdatePromptContext = {\n    group?: types.TPromptGroup;\n    previousListData?: types.PromptGroupListData;\n} | undefined;\nexport type UpdatePromptGroupOptions = MutationOptions<types.TUpdatePromptGroupResponse, types.TUpdatePromptGroupVariables, TUpdatePromptContext>;\nexport type CreatePromptOptions = MutationOptions<types.TCreatePromptResponse, types.TCreatePrompt>;\nexport type DeletePromptOptions = MutationOptions<types.TDeletePromptResponse, types.TDeletePromptVariables>;\nexport type DeletePromptGroupOptions = MutationOptions<types.TDeletePromptGroupResponse, types.TDeletePromptGroupRequest>;\nexport type UpdatePromptLabelOptions = MutationOptions<types.TUpdatePromptLabelsResponse, types.TUpdatePromptLabelsRequest>;\nexport type MakePromptProductionOptions = MutationOptions<types.TMakePromptProductionResponse, types.TMakePromptProductionRequest, TUpdatePromptContext>;\nexport type VerifyEmailOptions = MutationOptions<types.VerifyEmailResponse, types.TVerifyEmail>;\nexport type ResendVerifcationOptions = MutationOptions<types.VerifyEmailResponse, types.TResendVerificationEmail>;\nexport type RegistrationOptions = MutationOptions<types.TRegisterUserResponse, types.TRegisterUser, unknown, types.TError>;\nexport type UpdatePermVars<T> = {\n    roleName: string;\n    updates: Partial<T>;\n};\nexport type UpdatePromptPermVars = UpdatePermVars<r.TPromptPermissions>;\nexport type UpdateAgentPermVars = UpdatePermVars<r.TAgentPermissions>;\nexport type UpdatePermResponse = r.TRole;\nexport type UpdatePromptPermOptions = MutationOptions<UpdatePermResponse, UpdatePromptPermVars, unknown, types.TError | null | undefined>;\nexport type UpdateAgentPermOptions = MutationOptions<UpdatePermResponse, UpdateAgentPermVars, unknown, types.TError | null | undefined>;\nexport type UpdateConversationTagOptions = MutationOptions<types.TConversationTag, types.TConversationTagRequest>;\nexport type DeleteConversationTagOptions = MutationOptions<types.TConversationTag, string>;\nexport type AcceptTermsMutationOptions = MutationOptions<types.TAcceptTermsResponse, void, unknown, void>;\nexport type UpdatePluginAuthOptions = MutationOptions<types.TUser, types.TUpdateUserPlugins>;\nexport type ToolParamsMap = {\n    [Tools.execute_code]: {\n        lang: string;\n        code: string;\n    };\n};\nexport type ToolId = keyof ToolParamsMap;\nexport type ToolParams<T extends ToolId> = ToolParamsMap[T] & {\n    messageId: string;\n    partIndex?: number;\n    blockIndex?: number;\n    conversationId: string;\n};\nexport type ToolCallResponse = {\n    result: unknown;\n    attachments?: types.TAttachment[];\n};\nexport type ToolCallMutationOptions<T extends ToolId> = MutationOptions<ToolCallResponse, ToolParams<T>>;\nexport type TDeleteSharedLinkResponse = {\n    success: boolean;\n    shareId: string;\n    message: string;\n};\n"}}
