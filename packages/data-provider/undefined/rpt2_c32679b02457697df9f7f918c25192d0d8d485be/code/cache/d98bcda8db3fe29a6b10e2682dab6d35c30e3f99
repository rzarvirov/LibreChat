{"code":"import { __spreadArray } from \"tslib\";\nimport { z } from 'zod';\nexport function convertJsonSchemaToZod(schema) {\n    var _a;\n    var zodSchema;\n    // Handle primitive types\n    if (schema.type === 'string') {\n        if (Array.isArray(schema.enum) && schema.enum.length > 0) {\n            var _b = schema.enum, first = _b[0], rest = _b.slice(1);\n            zodSchema = z.enum(__spreadArray([first], rest, true));\n        }\n        else {\n            zodSchema = z.string();\n        }\n    }\n    else if (schema.type === 'number') {\n        zodSchema = z.number();\n    }\n    else if (schema.type === 'boolean') {\n        zodSchema = z.boolean();\n    }\n    else if (schema.type === 'array' && schema.items !== undefined) {\n        var itemSchema = convertJsonSchemaToZod(schema.items);\n        zodSchema = z.array(itemSchema);\n    }\n    else if (schema.type === 'object') {\n        var shape = {};\n        var properties = (_a = schema.properties) !== null && _a !== void 0 ? _a : {};\n        for (var _i = 0, _c = Object.entries(properties); _i < _c.length; _i++) {\n            var _d = _c[_i], key = _d[0], value = _d[1];\n            var fieldSchema = convertJsonSchemaToZod(value);\n            if (value.description != null && value.description !== '') {\n                fieldSchema = fieldSchema.describe(value.description);\n            }\n            shape[key] = fieldSchema;\n        }\n        var objectSchema = z.object(shape);\n        if (Array.isArray(schema.required) && schema.required.length > 0) {\n            var partial = Object.fromEntries(Object.entries(shape).map(function (_a) {\n                var _b;\n                var key = _a[0], value = _a[1];\n                return [\n                    key,\n                    ((_b = schema.required) === null || _b === void 0 ? void 0 : _b.includes(key)) === true ? value : value.optional(),\n                ];\n            }));\n            objectSchema = z.object(partial);\n        }\n        else {\n            objectSchema = objectSchema.partial();\n        }\n        zodSchema = objectSchema;\n    }\n    else {\n        zodSchema = z.unknown();\n    }\n    // Add description if present\n    if (schema.description != null && schema.description !== '') {\n        zodSchema = zodSchema.describe(schema.description);\n    }\n    return zodSchema;\n}\n//# sourceMappingURL=zod.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/node_modules/zod/index.d.ts"],"map":"{\"version\":3,\"file\":\"zod.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/zod.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/zod.d.ts","writeByteOrderMark":false,"text":"import { z } from 'zod';\nexport type JsonSchemaType = {\n    type: 'string' | 'number' | 'boolean' | 'array' | 'object';\n    enum?: string[];\n    items?: JsonSchemaType;\n    properties?: Record<string, JsonSchemaType>;\n    required?: string[];\n    description?: string;\n};\nexport declare function convertJsonSchemaToZod(schema: JsonSchemaType): z.ZodType;\n"}}
