{"code":"import { __assign, __rest } from \"tslib\";\nimport { errorsToString, extractEnvVariable, envVarRegex } from '../src/parsers';\nimport { azureGroupConfigsSchema } from '../src/config';\nexport var deprecatedAzureVariables = [\n    /* \"related to\" precedes description text */\n    { key: 'AZURE_OPENAI_DEFAULT_MODEL', description: 'setting a default model' },\n    { key: 'AZURE_OPENAI_MODELS', description: 'setting models' },\n    {\n        key: 'AZURE_USE_MODEL_AS_DEPLOYMENT_NAME',\n        description: 'using model names as deployment names',\n    },\n    { key: 'AZURE_API_KEY', description: 'setting a single Azure API key' },\n    { key: 'AZURE_OPENAI_API_INSTANCE_NAME', description: 'setting a single Azure instance name' },\n    {\n        key: 'AZURE_OPENAI_API_DEPLOYMENT_NAME',\n        description: 'setting a single Azure deployment name',\n    },\n    { key: 'AZURE_OPENAI_API_VERSION', description: 'setting a single Azure API version' },\n    {\n        key: 'AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME',\n        description: 'setting a single Azure completions deployment name',\n    },\n    {\n        key: 'AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME',\n        description: 'setting a single Azure embeddings deployment name',\n    },\n    {\n        key: 'PLUGINS_USE_AZURE',\n        description: 'using Azure for Plugins',\n    },\n];\nexport var conflictingAzureVariables = [\n    {\n        key: 'INSTANCE_NAME',\n    },\n    {\n        key: 'DEPLOYMENT_NAME',\n    },\n];\nexport function validateAzureGroups(configs) {\n    var _a, _b, _c, _d;\n    var isValid = true;\n    var modelNames = [];\n    var modelGroupMap = {};\n    var groupMap = {};\n    var errors = [];\n    var result = azureGroupConfigsSchema.safeParse(configs);\n    if (!result.success) {\n        isValid = false;\n        errors.push(errorsToString(result.error.errors));\n    }\n    else {\n        for (var _i = 0, _e = result.data; _i < _e.length; _i++) {\n            var group = _e[_i];\n            var groupName = group.group, apiKey = group.apiKey, _f = group.instanceName, instanceName = _f === void 0 ? '' : _f, _g = group.deploymentName, deploymentName = _g === void 0 ? '' : _g, _h = group.version, version = _h === void 0 ? '' : _h, _j = group.baseURL, baseURL = _j === void 0 ? '' : _j, additionalHeaders = group.additionalHeaders, models = group.models, _k = group.serverless, serverless = _k === void 0 ? false : _k, rest = __rest(group, [\"group\", \"apiKey\", \"instanceName\", \"deploymentName\", \"version\", \"baseURL\", \"additionalHeaders\", \"models\", \"serverless\"]);\n            if (groupMap[groupName]) {\n                errors.push(\"Duplicate group name detected: \\\"\".concat(groupName, \"\\\". Group names must be unique.\"));\n                return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n            }\n            if (serverless && !baseURL) {\n                errors.push(\"Group \\\"\".concat(groupName, \"\\\" is serverless but missing mandatory \\\"baseURL.\\\"\"));\n                return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n            }\n            if (!instanceName && !serverless) {\n                errors.push(\"Group \\\"\".concat(groupName, \"\\\" is missing an \\\"instanceName\\\" for non-serverless configuration.\"));\n                return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n            }\n            groupMap[groupName] = __assign({ apiKey: apiKey, instanceName: instanceName, deploymentName: deploymentName, version: version, baseURL: baseURL, additionalHeaders: additionalHeaders, models: models, serverless: serverless }, rest);\n            for (var modelName in group.models) {\n                modelNames.push(modelName);\n                var model = group.models[modelName];\n                if (modelGroupMap[modelName]) {\n                    errors.push(\"Duplicate model name detected: \\\"\".concat(modelName, \"\\\". Model names must be unique across groups.\"));\n                    return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n                }\n                if (serverless) {\n                    modelGroupMap[modelName] = {\n                        group: groupName,\n                    };\n                    continue;\n                }\n                var groupDeploymentName = (_a = group.deploymentName) !== null && _a !== void 0 ? _a : '';\n                var groupVersion = (_b = group.version) !== null && _b !== void 0 ? _b : '';\n                if (typeof model === 'boolean') {\n                    // For boolean models, check if group-level deploymentName and version are present.\n                    if (!groupDeploymentName || !groupVersion) {\n                        errors.push(\"Model \\\"\".concat(modelName, \"\\\" in group \\\"\").concat(groupName, \"\\\" is missing a deploymentName or version.\"));\n                        return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n                    }\n                    modelGroupMap[modelName] = {\n                        group: groupName,\n                    };\n                }\n                else {\n                    var modelDeploymentName = (_c = model.deploymentName) !== null && _c !== void 0 ? _c : '';\n                    var modelVersion = (_d = model.version) !== null && _d !== void 0 ? _d : '';\n                    // For object models, check if deploymentName and version are required but missing.\n                    if ((!modelDeploymentName && !groupDeploymentName) || (!modelVersion && !groupVersion)) {\n                        errors.push(\"Model \\\"\".concat(modelName, \"\\\" in group \\\"\").concat(groupName, \"\\\" is missing a required deploymentName or version.\"));\n                        return { isValid: false, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n                    }\n                    modelGroupMap[modelName] = {\n                        group: groupName,\n                        // deploymentName: modelDeploymentName || groupDeploymentName,\n                        // version: modelVersion || groupVersion,\n                    };\n                }\n            }\n        }\n    }\n    return { isValid: isValid, modelNames: modelNames, modelGroupMap: modelGroupMap, groupMap: groupMap, errors: errors };\n}\nexport function mapModelToAzureConfig(_a) {\n    var _b, _c, _d, _e, _f;\n    var modelName = _a.modelName, modelGroupMap = _a.modelGroupMap, groupMap = _a.groupMap;\n    var modelConfig = modelGroupMap[modelName];\n    if (!modelConfig) {\n        throw new Error(\"Model named \\\"\".concat(modelName, \"\\\" not found in configuration.\"));\n    }\n    var groupConfig = groupMap[modelConfig.group];\n    if (!groupConfig) {\n        throw new Error(\"Group \\\"\".concat(modelConfig.group, \"\\\" for model \\\"\").concat(modelName, \"\\\" not found in configuration.\"));\n    }\n    var instanceName = (_b = groupConfig.instanceName) !== null && _b !== void 0 ? _b : '';\n    if (!instanceName && groupConfig.serverless !== true) {\n        throw new Error(\"Group \\\"\".concat(modelConfig.group, \"\\\" is missing an instanceName for non-serverless configuration.\"));\n    }\n    var baseURL = (_c = groupConfig.baseURL) !== null && _c !== void 0 ? _c : '';\n    if (groupConfig.serverless === true && !baseURL) {\n        throw new Error(\"Group \\\"\".concat(modelConfig.group, \"\\\" is missing the required base URL for serverless configuration.\"));\n    }\n    if (groupConfig.serverless === true) {\n        var result_1 = {\n            azureOptions: {\n                azureOpenAIApiVersion: extractEnvVariable((_d = groupConfig.version) !== null && _d !== void 0 ? _d : ''),\n                azureOpenAIApiKey: extractEnvVariable(groupConfig.apiKey),\n            },\n            baseURL: extractEnvVariable(baseURL),\n            serverless: true,\n        };\n        var apiKeyValue = result_1.azureOptions.azureOpenAIApiKey;\n        if (typeof apiKeyValue === 'string' && envVarRegex.test(apiKeyValue)) {\n            throw new Error(\"Azure configuration environment variable \\\"\".concat(apiKeyValue, \"\\\" was not found.\"));\n        }\n        if (groupConfig.additionalHeaders) {\n            result_1.headers = groupConfig.additionalHeaders;\n        }\n        return result_1;\n    }\n    if (!instanceName) {\n        throw new Error(\"Group \\\"\".concat(modelConfig.group, \"\\\" is missing an instanceName for non-serverless configuration.\"));\n    }\n    var modelDetails = groupConfig.models[modelName];\n    var _g = typeof modelDetails === 'object'\n        ? {\n            deploymentName: (_e = modelDetails.deploymentName) !== null && _e !== void 0 ? _e : groupConfig.deploymentName,\n            version: (_f = modelDetails.version) !== null && _f !== void 0 ? _f : groupConfig.version,\n        }\n        : {\n            deploymentName: groupConfig.deploymentName,\n            version: groupConfig.version,\n        }, _h = _g.deploymentName, deploymentName = _h === void 0 ? '' : _h, _j = _g.version, version = _j === void 0 ? '' : _j;\n    if (!deploymentName || !version) {\n        throw new Error(\"Model \\\"\".concat(modelName, \"\\\" in group \\\"\").concat(modelConfig.group, \"\\\" is missing a deploymentName (\\\"\").concat(deploymentName, \"\\\") or version (\\\"\").concat(version, \"\\\").\"));\n    }\n    var azureOptions = {\n        azureOpenAIApiKey: extractEnvVariable(groupConfig.apiKey),\n        azureOpenAIApiInstanceName: extractEnvVariable(instanceName),\n        azureOpenAIApiDeploymentName: extractEnvVariable(deploymentName),\n        azureOpenAIApiVersion: extractEnvVariable(version),\n    };\n    for (var _i = 0, _k = Object.values(azureOptions); _i < _k.length; _i++) {\n        var value = _k[_i];\n        if (typeof value === 'string' && envVarRegex.test(value)) {\n            throw new Error(\"Azure configuration environment variable \\\"\".concat(value, \"\\\" was not found.\"));\n        }\n    }\n    var result = { azureOptions: azureOptions };\n    if (baseURL) {\n        result.baseURL = extractEnvVariable(baseURL);\n    }\n    if (groupConfig.additionalHeaders) {\n        result.headers = groupConfig.additionalHeaders;\n    }\n    return result;\n}\nexport function mapGroupToAzureConfig(_a) {\n    var _b, _c, _d, _e, _f, _g;\n    var groupName = _a.groupName, groupMap = _a.groupMap;\n    var groupConfig = groupMap[groupName];\n    if (!groupConfig) {\n        throw new Error(\"Group named \\\"\".concat(groupName, \"\\\" not found in configuration.\"));\n    }\n    var instanceName = (_b = groupConfig.instanceName) !== null && _b !== void 0 ? _b : '';\n    var serverless = (_c = groupConfig.serverless) !== null && _c !== void 0 ? _c : false;\n    var baseURL = (_d = groupConfig.baseURL) !== null && _d !== void 0 ? _d : '';\n    if (!instanceName && !serverless) {\n        throw new Error(\"Group \\\"\".concat(groupName, \"\\\" is missing an instanceName for non-serverless configuration.\"));\n    }\n    if (serverless && !baseURL) {\n        throw new Error(\"Group \\\"\".concat(groupName, \"\\\" is missing the required base URL for serverless configuration.\"));\n    }\n    var models = Object.keys(groupConfig.models);\n    if (models.length === 0) {\n        throw new Error(\"Group \\\"\".concat(groupName, \"\\\" does not have any models configured.\"));\n    }\n    // Use the first available model in the group\n    var firstModelName = models[0];\n    var modelDetails = groupConfig.models[firstModelName];\n    var azureOptions = {\n        azureOpenAIApiVersion: extractEnvVariable((_e = groupConfig.version) !== null && _e !== void 0 ? _e : ''),\n        azureOpenAIApiKey: extractEnvVariable(groupConfig.apiKey),\n        azureOpenAIApiInstanceName: extractEnvVariable(instanceName),\n        // DeploymentName and Version set below\n    };\n    if (serverless) {\n        return __assign({ azureOptions: azureOptions, baseURL: extractEnvVariable(baseURL), serverless: true }, (groupConfig.additionalHeaders && { headers: groupConfig.additionalHeaders }));\n    }\n    var _h = typeof modelDetails === 'object'\n        ? {\n            deploymentName: (_f = modelDetails.deploymentName) !== null && _f !== void 0 ? _f : groupConfig.deploymentName,\n            version: (_g = modelDetails.version) !== null && _g !== void 0 ? _g : groupConfig.version,\n        }\n        : {\n            deploymentName: groupConfig.deploymentName,\n            version: groupConfig.version,\n        }, _j = _h.deploymentName, deploymentName = _j === void 0 ? '' : _j, _k = _h.version, version = _k === void 0 ? '' : _k;\n    if (!deploymentName || !version) {\n        throw new Error(\"Model \\\"\".concat(firstModelName, \"\\\" in group \\\"\").concat(groupName, \"\\\" or the group itself is missing a deploymentName (\\\"\").concat(deploymentName, \"\\\") or version (\\\"\").concat(version, \"\\\").\"));\n    }\n    azureOptions.azureOpenAIApiDeploymentName = extractEnvVariable(deploymentName);\n    azureOptions.azureOpenAIApiVersion = extractEnvVariable(version);\n    var result = { azureOptions: azureOptions };\n    if (baseURL) {\n        result.baseURL = extractEnvVariable(baseURL);\n    }\n    if (groupConfig.additionalHeaders) {\n        result.headers = groupConfig.additionalHeaders;\n    }\n    return result;\n}\n//# sourceMappingURL=azure.js.map","references":["/Users/romanzarvirov/aibuddy/LibreChat/node_modules/zod/index.d.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/config.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/parsers.ts","/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/src/config.ts"],"map":"{\"version\":3,\"file\":\"azure.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/azure.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/romanzarvirov/aibuddy/LibreChat/packages/data-provider/dist/types/azure.d.ts","writeByteOrderMark":false,"text":"import type { TAzureGroups, TAzureGroupMap, TValidatedAzureConfig, TAzureConfigValidationResult } from '../src/config';\nexport declare const deprecatedAzureVariables: {\n    key: string;\n    description: string;\n}[];\nexport declare const conflictingAzureVariables: {\n    key: string;\n}[];\nexport declare function validateAzureGroups(configs: TAzureGroups): TAzureConfigValidationResult;\ntype AzureOptions = {\n    azureOpenAIApiKey: string;\n    azureOpenAIApiInstanceName?: string;\n    azureOpenAIApiDeploymentName?: string;\n    azureOpenAIApiVersion?: string;\n};\ntype MappedAzureConfig = {\n    azureOptions: AzureOptions;\n    baseURL?: string;\n    headers?: Record<string, string>;\n    serverless?: boolean;\n};\nexport declare function mapModelToAzureConfig({ modelName, modelGroupMap, groupMap, }: Omit<TValidatedAzureConfig, 'modelNames'> & {\n    modelName: string;\n}): MappedAzureConfig;\nexport declare function mapGroupToAzureConfig({ groupName, groupMap, }: {\n    groupName: string;\n    groupMap: TAzureGroupMap;\n}): MappedAzureConfig;\nexport {};\n"}}
